{"title": "interactive_julia_set_demo", "hide_code_cells": true, "display_mode": "last", "show_logo": true, "run_on_submit": true, "cells": {"0": {"key": 0, "type": "markdown", "code": "# Interactive Julia Set Visualization\n\nThis notebook demonstrates an efficient way to visualize Julia sets with interactive parameter control. \n\nThe Julia set for a complex parameter $c$ is the set of complex numbers $z$ for which the function $f_c(z) = z^2 + c$ does not escape to infinity when applied iteratively.\n\nWe'll first precompute several Julia sets for different values of $c$, store them in memory, and then provide a smooth interface to view them interactively.", "auto_rerun": true, "fragment": false}, "1": {"key": 1, "type": "code", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\ndef compute_julia(h, w, c, max_iter):\n    y, x = np.ogrid[-1.4:1.4:h*1j, -1.4:1.4:w*1j]\n    z = x + y*1j\n    divtime = max_iter + np.zeros(z.shape, dtype=int)\n    \n    for i in range(max_iter):\n        z = z**2 + c\n        diverge = z*np.conj(z) > 2**2\n        div_now = diverge & (divtime == max_iter)\n        divtime[div_now] = i\n        z[diverge] = 2\n    \n    return divtime\n\n# Create a custom colormap\ncolors = [(0, 0, 0), (0.5, 0, 0), (1, 0, 0), (1, 0.5, 0),\n         (1, 1, 0), (0, 1, 0), (0, 1, 1), (0, 0, 1)]\njulia_map = LinearSegmentedColormap.from_list('julia', colors)\n\n# Precompute Julia sets for various values of c\nh, w = 500, 500\nmax_iter = 100\n\n# Generate points on a circle for c values\nthetas = np.linspace(0, 2*np.pi, 51)[:-1]  # 50 points\nradius = 0.4\nc_values = radius * np.exp(1j * thetas)\n\n# Compute and store Julia sets\njulia_sets = {}\nfor i, c in enumerate(c_values):\n    print(f'Computing Julia set {i+1}/50...')\n    julia_sets[c] = compute_julia(h, w, c, max_iter)\n\nprint('Computation complete!')", "auto_rerun": false, "fragment": false}, "2": {"key": 2, "type": "markdown", "code": "## Interactive Visualization\n\nUse the slider below to change the value of $c$.", "auto_rerun": true, "fragment": false}, "3": {"key": 3, "type": "code", "code": "# Interactive control\ntheta = st.slider('\u03b8 (angle of c)', 0.0, 2*np.pi, 0.0, 0.1,key=\"theta\")\nc = radius * np.exp(1j * theta)\n\n# Find closest precomputed c value\nc_diffs = np.abs(c - c_values)\nnearest_c = c_values[np.argmin(c_diffs)]\n\n# Plot the Julia set\nplt.figure(figsize=(10, 10))\nplt.imshow(julia_sets[nearest_c], cmap=julia_map)\nplt.axis('off')\nplt.title(f'Julia Set for c \u2248 {nearest_c:.3f}')\nst.pyplot(plt.gcf());", "auto_rerun": true, "fragment": false}, "4": {"key": 4, "type": "markdown", "code": "### Implementation Notes\n\n1. We precompute 50 different Julia sets for c values around a circle of radius 0.4 in the complex plane.\n2. When you move the slider, we find the nearest precomputed set rather than computing a new one.\n3. This approach gives us smooth interactivity while maintaining visual quality.\n4. The custom colormap creates beautiful visualizations of the escape-time values.", "auto_rerun": true, "fragment": false}}}