# Generated by Streamlit Notebook
# Original notebook: reactive_viz_demo
# This file can be run directly with: streamlit run <filename>

from streamlit_notebook import get_notebook, render_notebook
import streamlit as st

st.set_page_config(page_title="st.notebook", layout="centered", initial_sidebar_state="collapsed")

nb = get_notebook(title='reactive_viz_demo')

@nb.cell(type='markdown', auto_rerun=True, fragment=False)
def cell_0():
    r'''
    # Interactive Function Visualization
    This notebook shows how to create dynamic visualizations that react to user input. We'll visualize the superposition of sine waves with adjustable parameters.
    '''

@nb.cell(type='code', auto_rerun=False, fragment=False)
def cell_1():
    import numpy as np
    import matplotlib.pyplot as plt

    # Create base x values
    x = np.linspace(0, 2*np.pi, 1000)

@nb.cell(type='code', auto_rerun=True, fragment=False)
def cell_2():
    # Interactive controls
    amp1 = st.slider('Amplitude 1', 0.0, 2.0, 1.0, key='amp1')
    freq1 = st.slider('Frequency 1', 1, 5, 1, key='freq1')
    phase1 = st.slider('Phase 1', 0.0, 2*np.pi, 0.0, key='phase1')

    amp2 = st.slider('Amplitude 2', 0.0, 2.0, 1.0, key='amp2')
    freq2 = st.slider('Frequency 2', 1, 5, 2, key='freq2')
    phase2 = st.slider('Phase 2', 0.0, 2*np.pi, 0.0, key='phase2')

@nb.cell(type='markdown', auto_rerun=True, fragment=False)
def cell_3():
    r'''
    ### Current wave equation:
    $$y(x) = <<amp1>>\sin(<<freq1>>x + <<phase1>>) + <<amp2>>\sin(<<freq2>>x + <<phase2>>)$$
    '''

@nb.cell(type='code', auto_rerun=True, fragment=False)
def cell_4():
    # Calculate waves
    wave1 = amp1 * np.sin(freq1 * x + phase1)
    wave2 = amp2 * np.sin(freq2 * x + phase2)
    combined = wave1 + wave2

    # Plot
    plt.figure(figsize=(12, 8))
    plt.plot(x, wave1, '--', label='Wave 1')
    plt.plot(x, wave2, '--', label='Wave 2')
    plt.plot(x, combined, '-', label='Combined')
    plt.grid(True)
    plt.legend()
    plt.title('Wave Superposition')
    st.pyplot(plt.gcf())

# Render the notebook
# Using render_notebook() instead of nb.render() allows the notebook
# to be replaced dynamically (e.g., when loading a different file)
render_notebook()