# Generated by Streamlit Notebook
# Original notebook: stock_dashboard_demo
# This file can be run directly with: streamlit run <filename>

from streamlit_notebook import get_notebook, render_notebook
import streamlit as st

st.set_page_config(page_title="Stock Dashboard", layout="wide")

nb = get_notebook(title='stock_dashboard')

@nb.cell(type='markdown', reactive=True, fragment=False)
def cell_0():
    r'''
    # Stock Price Analysis Dashboard
    This notebook demonstrates building a real-world dashboard using the vega_datasets package.
    Filter by stock symbols and date range to explore historical stock prices interactively.
    '''

@nb.cell(type='code', reactive=False, fragment=False)
def cell_1():
    import pandas as pd
    import altair as alt
    from vega_datasets import data

@nb.cell(type='code', reactive=False, fragment=False)
def cell_2():
    df = data.stocks()
    df['date'] = pd.to_datetime(df['date'])
    print(f"Loaded {len(df):,} records for {df['symbol'].nunique()} stocks")

@nb.cell(type='code', reactive=True, fragment=False)
def cell_3():
    st.markdown("### Stock Analysis Dashboard")
    symbols = st.multiselect("Select stocks", df['symbol'].unique(), default=['AAPL', 'GOOG'])
    date_range = st.date_input("Date range", [df['date'].min(), df['date'].max()])

@nb.cell(type='code', reactive=True, fragment=False)
def cell_4():
    filtered = df[df['symbol'].isin(symbols)] if symbols else df
    if date_range and len(date_range) == 2:
        filtered = filtered[(filtered['date'] >= pd.Timestamp(date_range[0])) &
                           (filtered['date'] <= pd.Timestamp(date_range[1]))]

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Selected Stocks", len(symbols))
    with col2:
        st.metric("Avg Price", f"${filtered['price'].mean():.2f}")
    with col3:
        st.metric("Total Records", f"{len(filtered):,}")

    chart = alt.Chart(filtered).mark_line().encode(
        x='date:T',
        y='price:Q',
        color='symbol:N'
    ).properties(height=400)
    st.altair_chart(chart, use_container_width=True);

# Render the notebook
# Using render_notebook() instead of nb.render() allows the notebook
# to be replaced dynamically (e.g., when loading a different file)
render_notebook()
