{"title": "machine_learning_demo", "hide_code_cells": false, "display_mode": "last", "show_logo": true, "run_on_submit": true, "cells": {"0": {"key": 0, "type": "markdown", "code": "# Interactive Machine Learning\nThis notebook demonstrates how to create an interactive machine learning demo using scikit-learn and Streamlit widgets. We'll create a simple classifier and visualize its decision boundaries.", "auto_rerun": true, "fragment": false}, "1": {"key": 1, "type": "code", "code": "from sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate dataset\nX, y = make_classification(n_samples=100, n_features=2, n_redundant=0, n_classes=2,\n                           n_clusters_per_class=1, random_state=42)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)", "auto_rerun": false, "fragment": false}, "2": {"key": 2, "type": "code", "code": "# Interactive parameters\nkernel = st.selectbox('Kernel', ['linear', 'rbf', 'poly'])\nC = st.slider('C (Regularization)', 0.1, 10.0, 1.0)\n\n# Train model\nmodel = SVC(kernel=kernel, C=C)\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nst.write(f'Test Accuracy: {accuracy:.2f}')", "auto_rerun": true, "fragment": false}, "3": {"key": 3, "type": "code", "code": "# Plot decision boundary\ndef plot_decision_boundary(model, X, y):\n    h = 0.02  # step size in the mesh\n    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\n    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])\n    Z = Z.reshape(xx.shape)\n    \n    plt.figure(figsize=(10, 8))\n    plt.contourf(xx, yy, Z, alpha=0.4)\n    plt.scatter(X[:, 0], X[:, 1], c=y, alpha=0.8)\n    plt.title(f'SVM Decision Boundary (Kernel: {kernel}, C: {C})')\n    return plt.gcf()\n\nfig = plot_decision_boundary(model, X, y)\nst.pyplot(fig);", "auto_rerun": true, "fragment": false}}}